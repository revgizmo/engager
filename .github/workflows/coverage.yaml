name: Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/R
            ~/.cache/R
          key: ${{ runner.os }}-coverage-${{ hashFiles('.github/workflows/coverage.yaml') }}
          restore-keys: |
            ${{ runner.os }}-coverage-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev

      - name: Install dependencies
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          install.packages(c("remotes", "covr", "roxygen2"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Generate documentation
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          roxygen2::roxygenise()
        shell: Rscript {0}

      - name: Build and install package
        run: |
          R CMD build .
          PKG_TGZ=$(ls -t *.tar.gz | head -1)
          R CMD INSTALL "$PKG_TGZ"
        shell: bash

      - name: Run coverage on installed package and report
        id: coverage
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          library(engager)
          cov <- covr::package_coverage()
          overall <- covr::percent_coverage(cov)
          df <- as.data.frame(cov)
          df <- df[!is.na(df$functions) & nzchar(df$functions), ]
          exports <- getNamespaceExports("engager")
          filtered <- df[df$functions %in% exports, , drop = FALSE]
          exp_cov <- if (nrow(filtered) > 0) round(100 * sum(filtered$value > 0, na.rm = TRUE) / nrow(filtered), 2) else NA_real_
          cat(sprintf("overall_coverage=%.2f\n", overall))
          cat(sprintf("exported_coverage=%.2f\n", exp_cov))
          if (is.na(exp_cov)) stop("Exported coverage could not be computed")
          if (exp_cov < 90) {
            message(sprintf("Exported coverage %.2f%% below threshold 90%%", exp_cov))
            quit(status = 1)
          }
        shell: Rscript {0}