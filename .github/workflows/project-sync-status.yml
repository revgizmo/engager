name: Project status sync

on:
  issues:
    types: [edited]
  pull_request:
    types: [opened, labeled, unlabeled, synchronize, closed]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Sync project item Status
        uses: actions/github-script@v7
        env:
          ORG: ${{ vars.PROJECTS_ORG || github.repository_owner }}
          PROJECT_NUMBER: ${{ vars.PROJECTS_NUMBER || '' }}
          PROJECT_TITLE: ${{ vars.PROJECTS_TITLE || 'CRAN Readiness' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ORG = process.env.ORG;
            const PROJECT_NUMBER = process.env.PROJECT_NUMBER;
            const PROJECT_TITLE = process.env.PROJECT_TITLE;

            async function getProject() {
              async function byNumber(){
                if (!PROJECT_NUMBER) return null;
                try {
                  const res = await github.graphql(`
                    query($org:String!,$number:Int!){ organization(login:$org){ projectV2(number:$number){ id title fields(first:50){ nodes{ __typename ... on ProjectV2FieldCommon { id name } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }
                  `, { org: ORG, number: parseInt(PROJECT_NUMBER, 10) });
                  return res.organization.projectV2;
                } catch { return null; }
              }
              async function byTitle(){
                const res = await github.graphql(`
                  query($org:String!){ organization(login:$org){ projectsV2(first:20){ nodes{ id title fields(first:50){ nodes{ __typename ... on ProjectV2FieldCommon { id name } ... on ProjectV2SingleSelectField { id name options { id name } } } } } } } }
                `, { org: ORG });
                return res.organization.projectsV2.nodes.find(p => p.title === PROJECT_TITLE) || null;
              }
              return (await byNumber()) || (await byTitle());
            }

            async function getOrAddItem(projectId, contentId) {
              const res = await github.graphql(`
                query($content:ID!){ node(id:$content){ ... on Issue { projectItems(first:50){ nodes{ id project { id } } } } ... on PullRequest { projectItems(first:50){ nodes{ id project { id } } } } } }
              `, { content: contentId });
              const items = res.node?.projectItems?.nodes || [];
              const found = items.find(i => i.project.id === projectId);
              if (found) return found.id;
              const addRes = await github.graphql(`
                mutation($project:ID!,$contentId:ID!){ addProjectV2ItemById(input:{projectId:$project, contentId:$contentId}){ item { id } } }
              `, { project: projectId, contentId });
              return addRes.addProjectV2ItemById.item.id;
            }

            async function setStatus(project, itemId, statusName){
              const statusField = project.fields.nodes.find(f => f.name === 'Status');
              if (!statusField || !statusField.options) return;
              const opt = statusField.options.find(o => o.name === statusName);
              if (!opt) return;
              await github.graphql(`
                mutation($project:ID!,$item:ID!,$field:ID!,$option:String!){ updateProjectV2ItemFieldValue(input:{ projectId:$project, itemId:$item, fieldId:$field, value:{ singleSelectOptionId:$option } }){ projectV2Item { id } } }
              `, { project: project.id, item: itemId, field: statusField.id, option: opt.id });
            }

            const project = await getProject();
            if (!project) { core.setFailed('Project not found'); return; }

            const isIssue = !!context.payload.issue;
            const isPR = !!context.payload.pull_request || context.eventName === 'pull_request_review' || context.eventName === 'check_suite';
            const nodeId = isIssue ? context.payload.issue.node_id
                                   : (context.payload.pull_request?.node_id || context.payload.check_suite?.pull_requests?.[0]?.node_id);
            if (!nodeId) return;

            const itemId = await getOrAddItem(project.id, nodeId);

            if (isIssue && context.payload.changes?.milestone) {
              await setStatus(project, itemId, 'Ready');
            }

            if (context.eventName === 'pull_request' && context.payload.action === 'opened') {
              await setStatus(project, itemId, 'In Review');
            }

            if (context.eventName === 'pull_request_review' && context.payload.review.state === 'approved') {
              await setStatus(project, itemId, 'In QA');
            }

            if (context.eventName === 'check_suite' && context.payload.check_suite.conclusion === 'success') {
              await setStatus(project, itemId, 'In QA');
            }

            if (context.eventName === 'pull_request' && context.payload.action === 'closed' && context.payload.pull_request.merged) {
              await setStatus(project, itemId, 'Done');
            }

