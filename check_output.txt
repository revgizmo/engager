══ Documenting ═════════════════════════════════════════════════════════════════
ℹ Updating engager documentation
ℹ Loading engager
Welcome to engager!
- Start with: vignette('getting-started', package='engager')
- Core functions: vignette('essential-functions', package='engager')
- Sample data: system.file('extdata/transcripts', package='engager')
- Quick example: example(summarize_transcript_metrics)

To suppress this message: options(engager.show_startup = FALSE)

══ Building ════════════════════════════════════════════════════════════════════
Setting env vars:
• CFLAGS    : -Wall -pedantic
• CXXFLAGS  : -Wall -pedantic
• CXX11FLAGS: -Wall -pedantic
• CXX14FLAGS: -Wall -pedantic
• CXX17FLAGS: -Wall -pedantic
• CXX20FLAGS: -Wall -pedantic
── R CMD build ─────────────────────────────────────────────────────────────────
* checking for file ‘/Users/piper/git/zoomstudentengagement/DESCRIPTION’ ... OK
* preparing ‘engager’:
* checking DESCRIPTION meta-information ... OK
* installing the package to build vignettes
* creating vignettes ... OK
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
Removed empty directory ‘engager/.cursor’
Removed empty directory ‘engager/.vscode’
Removed empty directory ‘engager/backups’
Removed empty directory ‘engager/cran’
Removed empty directory ‘engager/debug_output’
Removed empty directory ‘engager/dev’
Removed empty directory ‘engager/revdep’
Removed empty directory ‘engager/scripts’
Removed empty directory ‘engager/tests/testthat/_snaps’
Removed empty directory ‘engager/zoom_real_world_testing’
* building ‘engager_0.1.0.tar.gz’

══ Checking ════════════════════════════════════════════════════════════════════
Setting env vars:
• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE
• _R_CHECK_CRAN_INCOMING_                      : FALSE
• _R_CHECK_FORCE_SUGGESTS_                     : FALSE
• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE
• NOT_CRAN                                     : true
── R CMD check ─────────────────────────────────────────────────────────────────
* using log directory ‘/private/var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T/RtmpaOGwcT/file907050c52e19/engager.Rcheck’
* using R version 4.1.1 (2021-08-10)
* using platform: aarch64-apple-darwin20 (64-bit)
* using session charset: UTF-8
* using options ‘--no-manual --as-cran’
* checking for file ‘engager/DESCRIPTION’ ... OK
* checking extension type ... Package
* this is package ‘engager’ version ‘0.1.0’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking serialization versions ... OK
* checking whether package ‘engager’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking for future file timestamps ... NOTE
unable to verify current time
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... NOTE
Non-standard files/directories found at top level:
  ‘CHANGELOG.md’ ‘check_output.txt’
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking dependencies in R code ... WARNING
'::' or ':::' import not declared from: ‘suutils’
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd line widths ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’ [14s/18s]
 ERROR
Running the tests in ‘tests/testthat.R’ failed.
Last 13 lines of output:
  Backtrace:
      ▆
   1. ├─engager:::detect_unmatched_names(transcript_df, roster_df) at test-prompt_name_matching.R:138:3
   2. │ └─engager:::hash_name_consistently(unmatched_names)
   3. │   └─base::sapply(...)
   4. │     └─base::lapply(X = X, FUN = FUN, ...)
   5. │       └─engager (local) FUN(X[[i]], ...)
   6. └─base::loadNamespace(x)
   7.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
   8.     └─base (local) withOneRestart(expr, restarts[[1L]])
   9.       └─base (local) doWithOneRestart(return(expr), restart)
  
  [ FAIL 35 | WARN 61 | SKIP 15 | PASS 2066 ]
  Error: Test failures
  Execution halted
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking re-building of vignette outputs ... OK
* checking for non-standard things in the check directory ... OK
* checking for detritus in the temp directory ... OK
* DONE

Status: 1 ERROR, 1 WARNING, 2 NOTEs
See
  ‘/private/var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T/RtmpaOGwcT/file907050c52e19/engager.Rcheck/00check.log’
for details.

── R CMD check results ────────────────────────────────────── engager 0.1.0 ────
Duration: 42.1s

❯ checking tests ...
  See below...

❯ checking dependencies in R code ... WARNING
  '::' or ':::' import not declared from: ‘suutils’

❯ checking for future file timestamps ... NOTE
  unable to verify current time

❯ checking top-level files ... NOTE
  Non-standard files/directories found at top level:
    ‘CHANGELOG.md’ ‘check_output.txt’

── Test failures ───────────────────────────────────────────────── testthat ────

> library(testthat)
> library(engager)
Welcome to engager!
- Start with: vignette('getting-started', package='engager')
- Core functions: vignette('essential-functions', package='engager')
- Sample data: system.file('extdata/transcripts', package='engager')
- Quick example: example(summarize_transcript_metrics)

To suppress this message: options(engager.show_startup = FALSE)
> 
> test_check("engager")

Attaching package: 'lubridate'

The following objects are masked from 'package:base':

    date, intersect, setdiff, union

=== Testing consolidate_transcript with minimal data ===
Input data dimensions: 3 x 8
Input data columns: transcript_file, comment_num, name, comment, start, end, duration, wordcount
Step 1: About to call consolidate_transcript...
Step 2: Calling consolidate_transcript...
Step 3: consolidate_transcript completed successfully
Result dimensions: 2 x 7
=== Testing consolidate_transcript with rlang::syms debugging ===
Step 1: Testing rlang::syms with dplyr::group_by...
Group vars: transcript_file, comment_num
Creating rlang::syms...
rlang::syms created successfully: list
Testing dplyr::group_by with rlang::syms...
dplyr::group_by with rlang::syms completed successfully
Step 2: Testing full consolidate_transcript function...
Step 3: Full function completed successfully
FERPA standard mode enabled; educational compliance protection applied.
Rows: 7 Columns: 4
-- Column specification --------------------------------------------------------
Delimiter: ","
chr (3): formal_name, preferred_name, transcript_names
num (1): attends_sessions

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.
Welcome to engager!
- Start with: vignette('getting-started', package='engager')
- Core functions: vignette('essential-functions', package='engager')
- Sample data: system.file('extdata/transcripts', package='engager')
- Quick example: example(summarize_transcript_metrics)

To suppress this message: options(engager.show_startup = FALSE)
=== Testing summarize_transcript_metrics with minimal data ===
Input data dimensions: 4 x 8
Input data columns: transcript_file, comment_num, name, comment, start, end, duration, wordcount
Step 1: About to call summarize_transcript_metrics...
Step 2: Calling summarize_transcript_metrics...
Step 3: summarize_transcript_metrics completed successfully
Result dimensions: 2 x 13
=== Testing summarize_transcript_metrics with rlang::syms debugging ===
Step 1: Testing summarize_transcript_metrics function...
Step 2: Function completed successfully
[ FAIL 35 | WARN 61 | SKIP 15 | PASS 2066 ]

══ Skipped tests (15) ══════════════════════════════════════════════════════════
• Interactive mode testing requires manual verification (3):
  'test-create_session_mapping.R:425:3', 'test-create_session_mapping.R:430:3',
  'test-create_session_mapping.R:435:3'
• Skipping empty zoom recordings test due to data handling issues (1):
  'test-load_session_mapping.R:254:3'
• empty test (11): 'test-analyze_transcripts.R:90:1',
  'test-analyze_transcripts.R:231:1', 'test-analyze_transcripts.R:286:1',
  'test-analyze_transcripts.R:386:1', 'test-analyze_transcripts.R:478:1',
  'test-analyze_transcripts.R:565:1', 'test-analyze_transcripts.R:610:1',
  'test-consolidate_transcript_segfault.R:4:1',
  'test-consolidate_transcript_segfault.R:64:1',
  'test-summarize_transcript_metrics_segfault.R:4:1',
  'test-summarize_transcript_metrics_segfault.R:64:1'

══ Warnings ════════════════════════════════════════════════════════════════════
── Warning ('test-detect_duplicate_transcripts.R:743:3'): detect_duplicate_transcripts handles transcript loading errors gracefully ──
Could not load transcript: test1.vtt - Invalid VTT: expected 'WEBVTT', got 'This is not a valid VTT file'
Backtrace:
    ▆
 1. └─engager::detect_duplicate_transcripts(...) at test-detect_duplicate_transcripts.R:743:3
 2.   └─engager:::calc_content_similarity_matrix(...)
 3.     └─base::tryCatch(...)
 4.       └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 5.         └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 6.           └─value[[3L]](cond)
── Warning ('test-ensure_privacy.R:67:3'): ensure_privacy handles different privacy levels ──
CRITICAL: Privacy disabled; outputs may contain identifiable data and violate FERPA requirements.
Backtrace:
    ▆
 1. └─engager::ensure_privacy(test_data, privacy_level = "none") at test-ensure_privacy.R:67:3
 2.   └─engager:::handle_privacy_level(...)
── Warning ('test-ferpa_compliance.R:338:3'): set_privacy_defaults handles multiple calls ──
Privacy disabled globally; outputs may contain identifiable data.
Backtrace:
    ▆
 1. └─engager:::set_privacy_defaults("none") at test-ferpa_compliance.R:338:3
── Warning ('test-load_cancelled_classes-coverage.R:8:3'): load_cancelled_classes returns blank template when file missing ──
File does not exist: /var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN/file960e2425aed2/missing.csv
Backtrace:
    ▆
 1. └─engager:::load_cancelled_classes(data_folder = tmp, cancelled_classes_file = "missing.csv") at test-load_cancelled_classes-coverage.R:8:3
── Warning ('test-load_cancelled_classes-coverage.R:17:3'): load_cancelled_classes can write blank template when requested ──
File does not exist: /var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN/file960e34623730/new.csv
Backtrace:
    ▆
 1. └─engager:::load_cancelled_classes(...) at test-load_cancelled_classes-coverage.R:17:3
── Warning ('test-load_cancelled_classes.R:24:3'): load_cancelled_classes returns blank tibble if file does not exist ──
File does not exist: /var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN/nonexistent.csv
Backtrace:
    ▆
 1. └─engager:::load_cancelled_classes(...) at test-load_cancelled_classes.R:24:3
── Warning ('test-load_cancelled_classes.R:60:3'): load_cancelled_classes creates blank file when write_blank_cancelled_classes is TRUE ──
File does not exist: /var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN/new_cancelled_classes.csv
Backtrace:
    ▆
 1. └─engager:::load_cancelled_classes(...) at test-load_cancelled_classes.R:60:3
── Warning ('test-load_session_mapping.R:77:3'): load_session_mapping validates required columns ──
The following named parsers don't match the column names: course, section, session_date, session_time, instructor
Backtrace:
     ▆
  1. ├─testthat::expect_error(load_session_mapping(temp_file), "Session mapping file missing required columns") at test-load_session_mapping.R:77:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. ├─engager:::load_session_mapping(temp_file)
  8. │ └─engager:::load_mapping_file(mapping_file)
  9. │   └─readr::read_csv(...)
 10. │     └─vroom::vroom(...)
 11. │       └─vroom:::vroom_(...)
 12. └─vroom (local) `<fn>`(`<col_spec>`, 2L, `<chr>`, NULL, "unique")
── Warning ('test-load_session_mapping.R:283:7'): load_session_mapping shows validation warnings outside test environment ──
One or more parsing issues, call `problems()` on your data frame for details, e.g.:
  dat <- vroom(...)
  problems(dat)
Backtrace:
     ▆
  1. ├─testthat::expect_warning(...) at test-load_session_mapping.R:281:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. ├─engager:::load_session_mapping(temp_file, validate_mapping = TRUE) at test-load_session_mapping.R:283:7
  8. │ └─engager:::load_mapping_file(mapping_file)
  9. │   └─readr::read_csv(...)
 10. │     └─vroom::vroom(...)
 11. │       └─vroom:::vroom_(...)
 12. └─cli (local) `<fn>`(`<chr>`, "vroom_parse_issue")
── Warning ('test-lookup_merge_utils-comprehensive.R:49:3'): write_lookup_transactional handles different scenarios ──
Could not create backup for /var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN/file960e50d95f7c.csv - continuing without backup
Backtrace:
    ▆
 1. └─engager:::write_lookup_transactional(empty_data, temp_file) at test-lookup_merge_utils-comprehensive.R:49:3
── Warning ('test-lookup_merge_utils-comprehensive.R:112:3'): lookup_merge_utils functions handle file system errors ──
cannot open file '/invalid/path/that/does/not/exist/test.csv.tmp.38414': No such file or directory
Backtrace:
     ▆
  1. ├─testthat::expect_error(...) at test-lookup_merge_utils-comprehensive.R:112:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. └─engager:::write_lookup_transactional(test_data, invalid_path)
  8.   ├─utils::write.csv(df, tmp, row.names = FALSE, fileEncoding = "UTF-8")
  9.   │ └─base::eval.parent(Call)
 10.   │   └─base::eval(expr, p)
 11.   │     └─base::eval(expr, p)
 12.   └─utils::write.table(...)
 13.     └─base::file(file, ifelse(append, "a", "w"), encoding = fileEncoding)
── Warning ('test-lookup_merge_utils-comprehensive.R:113:3'): lookup_merge_utils functions handle file system errors ──
cannot open file '/invalid/path/that/does/not/exist/test.csv.tmp.38414': No such file or directory
Backtrace:
     ▆
  1. ├─testthat::expect_error(...) at test-lookup_merge_utils-comprehensive.R:113:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. └─engager:::conditionally_write_lookup(...)
  8.   └─engager:::write_lookup_transactional(df, path)
  9.     ├─utils::write.csv(df, tmp, row.names = FALSE, fileEncoding = "UTF-8")
 10.     │ └─base::eval.parent(Call)
 11.     │   └─base::eval(expr, p)
 12.     │     └─base::eval(expr, p)
 13.     └─utils::write.table(...)
 14.       └─base::file(file, ifelse(append, "a", "w"), encoding = fileEncoding)
── Warning ('test-make_clean_names_df-comprehensive.R:15:7'): make_clean_names_df handles input validation ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:13:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:15:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:78:7'): make_clean_names_df handles different data_folder values ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:76:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:78:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:92:7'): make_clean_names_df handles different data_folder values ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:90:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:92:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:107:7'): make_clean_names_df handles different data_folder values ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:105:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:107:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:131:7'): make_clean_names_df handles different section_names_lookup_file values ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:129:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:131:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:146:7'): make_clean_names_df handles different section_names_lookup_file values ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:144:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:146:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:161:7'): make_clean_names_df handles different section_names_lookup_file values ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:159:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:161:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:187:7'): make_clean_names_df handles different roster_sessions structures ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:185:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:187:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:208:7'): make_clean_names_df handles different roster_sessions structures ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:206:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:208:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:228:7'): make_clean_names_df handles different roster_sessions structures ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:226:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:228:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:256:7'): make_clean_names_df handles different transcripts_metrics_df structures ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:254:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:256:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:279:7'): make_clean_names_df handles different transcripts_metrics_df structures ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:277:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:279:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:302:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:300:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:302:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:302:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `course`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:300:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:302:7
 6.   ├─base::paste(result$course, result$section, sep = ".")
 7.   ├─result$course
 8.   └─tibble:::`$.tbl_df`(result, "course")
── Warning ('test-make_clean_names_df-comprehensive.R:302:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `section`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:300:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:302:7
 6.   ├─base::paste(result$course, result$section, sep = ".")
 7.   ├─result$section
 8.   └─tibble:::`$.tbl_df`(result, "section")
── Warning ('test-make_clean_names_df-comprehensive.R:302:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `course`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:300:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:302:7
 6.   ├─result$course
 7.   └─tibble:::`$.tbl_df`(result, "course")
── Warning ('test-make_clean_names_df-comprehensive.R:302:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `section`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:300:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:302:7
 6.   ├─result$section
 7.   └─tibble:::`$.tbl_df`(result, "section")
── Warning ('test-make_clean_names_df-comprehensive.R:323:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:321:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:323:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:347:7'): make_clean_names_df handles edge cases ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:345:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:347:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:370:7'): make_clean_names_df handles parameter combinations ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:368:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:370:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:386:7'): make_clean_names_df handles parameter combinations ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:384:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:386:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_clean_names_df-comprehensive.R:413:7'): make_clean_names_df handles large datasets ──
Unknown or uninitialised column: `time`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-make_clean_names_df-comprehensive.R:411:3
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. └─engager:::make_clean_names_df(...) at test-make_clean_names_df-comprehensive.R:413:7
 6.   ├─result$time
 7.   └─tibble:::`$.tbl_df`(result, "time")
── Warning ('test-make_transcripts_summary_df.R:247:3'): make_transcripts_summary_df handles missing columns gracefully ──
Unknown or uninitialised column: `duration`.
Backtrace:
    ▆
 1. ├─testthat::expect_warning(...) at test-make_transcripts_summary_df.R:247:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::make_transcripts_summary_df(session_summary_df)
 8.   ├─group_data$duration
 9.   └─tibble:::`$.tbl_df`(group_data, "duration")
── Warning ('test-make_transcripts_summary_df.R:247:3'): make_transcripts_summary_df handles missing columns gracefully ──
Unknown or uninitialised column: `wordcount`.
Backtrace:
    ▆
 1. ├─testthat::expect_warning(...) at test-make_transcripts_summary_df.R:247:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::make_transcripts_summary_df(session_summary_df)
 8.   ├─group_data$wordcount
 9.   └─tibble:::`$.tbl_df`(group_data, "wordcount")
── Warning ('test-make_transcripts_summary_df.R:247:3'): make_transcripts_summary_df handles missing columns gracefully ──
Unknown or uninitialised column: `duration`.
Backtrace:
    ▆
 1. ├─testthat::expect_warning(...) at test-make_transcripts_summary_df.R:247:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::make_transcripts_summary_df(session_summary_df)
 8.   ├─group_data$duration
 9.   └─tibble:::`$.tbl_df`(group_data, "duration")
── Warning ('test-make_transcripts_summary_df.R:247:3'): make_transcripts_summary_df handles missing columns gracefully ──
Unknown or uninitialised column: `duration`.
Backtrace:
    ▆
 1. ├─testthat::expect_warning(...) at test-make_transcripts_summary_df.R:247:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::make_transcripts_summary_df(session_summary_df)
 8.   ├─group_data$duration
 9.   └─tibble:::`$.tbl_df`(group_data, "duration")
── Warning ('test-make_transcripts_summary_df.R:247:3'): make_transcripts_summary_df handles missing columns gracefully ──
Unknown or uninitialised column: `wordcount`.
Backtrace:
    ▆
 1. ├─testthat::expect_warning(...) at test-make_transcripts_summary_df.R:247:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::make_transcripts_summary_df(session_summary_df)
 8.   ├─group_data$wordcount
 9.   └─tibble:::`$.tbl_df`(group_data, "wordcount")
── Warning ('test-safe_name_matching_workflow.R:335:7'): handle_unmatched_names works correctly ──
Some names need matching. Privacy temporarily disabled for matching process.
Backtrace:
    ▆
 1. ├─testthat::with_mocked_bindings(...) at test-safe_name_matching_workflow.R:332:3
 2. ├─testthat::expect_error(...) at test-safe_name_matching_workflow.R:335:7
 3. │ └─testthat:::expect_condition_matching(...)
 4. │   └─testthat:::quasi_capture(...)
 5. │     ├─testthat (local) .capture(...)
 6. │     │ └─base::withCallingHandlers(...)
 7. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 8. └─engager:::handle_unmatched_names(...)
── Warning ('test-safe_name_matching_workflow_coverage.R:155:3'): safe_name_matching_workflow works with valid data ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:155:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:175:3'): safe_name_matching_workflow handles different privacy levels ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:175:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:185:3'): safe_name_matching_workflow handles different privacy levels ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:185:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:195:3'): safe_name_matching_workflow handles different privacy levels ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:195:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:214:3'): safe_name_matching_workflow handles unmatched names ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. ├─testthat::expect_error(...) at test-safe_name_matching_workflow_coverage.R:214:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::safe_name_matching_workflow(...)
 8.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:224:3'): safe_name_matching_workflow handles unmatched names ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. ├─testthat::expect_error(...) at test-safe_name_matching_workflow_coverage.R:224:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::safe_name_matching_workflow(...)
 8.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:224:3'): safe_name_matching_workflow handles unmatched names ──
Some names need matching. Privacy temporarily disabled for matching process.
Backtrace:
    ▆
 1. ├─testthat::expect_error(...) at test-safe_name_matching_workflow_coverage.R:224:3
 2. │ └─testthat:::expect_condition_matching(...)
 3. │   └─testthat:::quasi_capture(...)
 4. │     ├─testthat (local) .capture(...)
 5. │     │ └─base::withCallingHandlers(...)
 6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 7. └─engager:::safe_name_matching_workflow(...)
 8.   └─engager:::process_name_matching_workflow(...)
 9.     └─engager:::handle_unmatched_names(...)
── Warning ('test-safe_name_matching_workflow_coverage.R:265:3'): safe_name_matching_workflow handles name mapping file issues ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:265:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:324:3'): safe_name_matching_workflow handles memory cleanup ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:324:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:353:5'): safe_name_matching_workflow handles diagnostic messages ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:353:5
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:389:3'): safe_name_matching_workflow handles complex name matching scenarios ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:389:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:428:3'): safe_name_matching_workflow handles international names ──
Missing columns in transcript data: user_name, message, timestamp
This may affect processing. Expected columns: user_name, message, timestamp
Backtrace:
    ▆
 1. └─engager:::safe_name_matching_workflow(...) at test-safe_name_matching_workflow_coverage.R:428:3
 2.   └─engager:::load_and_validate_transcript(transcript_file_path)
── Warning ('test-safe_name_matching_workflow_coverage.R:648:7'): handle_unmatched_names handles different actions ──
Some names need matching. Privacy temporarily disabled for matching process.
Backtrace:
    ▆
 1. ├─testthat::with_mocked_bindings(...) at test-safe_name_matching_workflow_coverage.R:642:3
 2. ├─testthat::expect_error(...) at test-safe_name_matching_workflow_coverage.R:648:7
 3. │ └─testthat:::expect_condition_matching(...)
 4. │   └─testthat:::quasi_capture(...)
 5. │     ├─testthat (local) .capture(...)
 6. │     │ └─base::withCallingHandlers(...)
 7. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
 8. └─engager:::handle_unmatched_names(...)
── Warning ('test-summarize_transcript_metrics.R:130:9'): summarize_transcript_metrics works with different scenarios ──
Unknown or uninitialised column: `name`.
Backtrace:
     ▆
  1. ├─base::tryCatch(...) at test-summarize_transcript_metrics.R:128:5
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. ├─base::do.call(summarize_transcript_metrics, scenario) at test-summarize_transcript_metrics.R:130:9
  6. └─engager (local) `<fn>`(transcript_df = `<tibble[,0]>`)
  7.   ├─...[]
  8.   ├─tibble:::`[.tbl_df`(...)
  9.   ├─transcript_df$name %in% unlist(names_exclude)
 10.   ├─transcript_df$name
 11.   └─tibble:::`$.tbl_df`(transcript_df, name)
── Warning ('test-summarize_transcript_metrics.R:168:9'): summarize_transcript_metrics handles edge cases ──
Unknown or uninitialised column: `duration`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-summarize_transcript_metrics.R:166:5
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. ├─base::do.call(summarize_transcript_metrics, case) at test-summarize_transcript_metrics.R:168:9
 6. └─engager (local) `<fn>`(transcript_df = `<tibble[,2]>`)
 7.   ├─group_data$duration
 8.   └─tibble:::`$.tbl_df`(group_data, "duration")
── Warning ('test-summarize_transcript_metrics.R:168:9'): summarize_transcript_metrics handles edge cases ──
Unknown or uninitialised column: `wordcount`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-summarize_transcript_metrics.R:166:5
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. ├─base::do.call(summarize_transcript_metrics, case) at test-summarize_transcript_metrics.R:168:9
 6. └─engager (local) `<fn>`(transcript_df = `<tibble[,2]>`)
 7.   ├─group_data$wordcount
 8.   └─tibble:::`$.tbl_df`(group_data, "wordcount")
── Warning ('test-summarize_transcript_metrics.R:168:9'): summarize_transcript_metrics handles edge cases ──
Unknown or uninitialised column: `wordcount`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-summarize_transcript_metrics.R:166:5
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. ├─base::do.call(summarize_transcript_metrics, case) at test-summarize_transcript_metrics.R:168:9
 6. └─engager (local) `<fn>`(transcript_df = `<tibble[,2]>`)
 7.   ├─group_data$wordcount
 8.   └─tibble:::`$.tbl_df`(group_data, "wordcount")
── Warning ('test-summarize_transcript_metrics.R:168:9'): summarize_transcript_metrics handles edge cases ──
Unknown or uninitialised column: `comment`.
Backtrace:
    ▆
 1. ├─base::tryCatch(...) at test-summarize_transcript_metrics.R:166:5
 2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 3. │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 4. │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 5. ├─base::do.call(summarize_transcript_metrics, case) at test-summarize_transcript_metrics.R:168:9
 6. └─engager (local) `<fn>`(transcript_df = `<tibble[,2]>`)
 7.   ├─group_data$comment
 8.   └─tibble:::`$.tbl_df`(group_data, "comment")
── Warning ('test-write_metrics-comprehensive.R:151:3'): write_metrics handles data with list columns ──
Converting list columns to JSON strings: metadata
Backtrace:
    ▆
 1. └─engager::write_metrics(test_data, path = tmp) at test-write_metrics-comprehensive.R:151:3
 2.   └─engager:::process_data_for_export(data, privacy_level, comments_format)
── Warning ('test-write_metrics-comprehensive.R:202:3'): write_metrics handles file write errors gracefully ──
'raw = FALSE' but '/var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN' is not a regular file
Backtrace:
     ▆
  1. ├─testthat::expect_error(write_metrics(test_data, path = tmp_dir)) at test-write_metrics-comprehensive.R:202:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. └─engager::write_metrics(test_data, path = tmp_dir)
  8.   └─engager:::write_processed_data_to_file(export_data, what, path)
  9.     ├─utils::write.csv(export_data, path, row.names = FALSE)
 10.     │ └─base::eval.parent(Call)
 11.     │   └─base::eval(expr, p)
 12.     │     └─base::eval(expr, p)
 13.     └─utils::write.table(...)
 14.       └─base::file(file, ifelse(append, "a", "w"))
── Warning ('test-write_metrics-comprehensive.R:202:3'): write_metrics handles file write errors gracefully ──
cannot open file '/var/folders/gm/wnk5gljx6yd_ffmqb8vf48qh0000gn/T//RtmpXz3ojG/working_dir/RtmpgvXXAN': Is a directory
Backtrace:
     ▆
  1. ├─testthat::expect_error(write_metrics(test_data, path = tmp_dir)) at test-write_metrics-comprehensive.R:202:3
  2. │ └─testthat:::expect_condition_matching(...)
  3. │   └─testthat:::quasi_capture(...)
  4. │     ├─testthat (local) .capture(...)
  5. │     │ └─base::withCallingHandlers(...)
  6. │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  7. └─engager::write_metrics(test_data, path = tmp_dir)
  8.   └─engager:::write_processed_data_to_file(export_data, what, path)
  9.     ├─utils::write.csv(export_data, path, row.names = FALSE)
 10.     │ └─base::eval.parent(Call)
 11.     │   └─base::eval(expr, p)
 12.     │     └─base::eval(expr, p)
 13.     └─utils::write.table(...)
 14.       └─base::file(file, ifelse(append, "a", "w"))

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-ferpa_compliance-issue310.R:82:3'): anonymize_educational_data supports mask, hash, pseudonymize, and aggregate modes ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager::anonymize_educational_data(df, method = "hash", hash_salt = "pepper") at test-ferpa_compliance-issue310.R:82:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-ferpa_compliance.R:79:3'): anonymize_educational_data works correctly ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager::anonymize_educational_data(sample_data, method = "hash") at test-ferpa_compliance.R:79:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-comprehensive.R:7:3'): hash_name_consistently handles different input types ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names) at test-hash_name_consistently-comprehensive.R:7:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-comprehensive.R:43:3'): hash_name_consistently handles different salt values ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names) at test-hash_name_consistently-comprehensive.R:43:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-comprehensive.R:63:3'): hash_name_consistently handles normalize_names parameter ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names, normalize_names = TRUE) at test-hash_name_consistently-comprehensive.R:63:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-comprehensive.R:78:3'): hash_name_consistently handles NA and empty values ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names_with_na) at test-hash_name_consistently-comprehensive.R:78:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-comprehensive.R:102:3'): hash_name_consistently produces consistent hashes ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names) at test-hash_name_consistently-comprehensive.R:102:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-comprehensive.R:210:3'): hash_name_consistently handles edge cases ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(long_name) at test-hash_name_consistently-comprehensive.R:210:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-coverage.R:8:3'): hash_name_consistently handles vector with NA and empty elements ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(input) at test-hash_name_consistently-coverage.R:8:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently-coverage.R:15:3'): hash_name_consistently differs when normalize_names = FALSE ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name, normalize_names = TRUE) at test-hash_name_consistently-coverage.R:15:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:9:3'): hash_name_consistently produces consistent hashes ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name1) at test-hash_name_consistently.R:9:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:22:3'): hash_name_consistently produces different hashes for different inputs ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name1) at test-hash_name_consistently.R:22:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:48:3'): hash_name_consistently handles special characters ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name_special) at test-hash_name_consistently.R:48:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:59:3'): hash_name_consistently handles case sensitivity ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name_upper) at test-hash_name_consistently.R:59:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:72:3'): hash_name_consistently handles whitespace ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name1) at test-hash_name_consistently.R:72:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:95:3'): hash_name_consistently handles vector inputs ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names) at test-hash_name_consistently.R:95:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:105:3'): hash_name_consistently produces reasonable hash lengths ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(name) at test-hash_name_consistently.R:105:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:115:3'): hash_name_consistently handles very long names ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(long_name) at test-hash_name_consistently.R:115:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:124:3'): hash_name_consistently handles unicode characters ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(unicode_name) at test-hash_name_consistently.R:124:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:133:3'): hash_name_consistently handles mixed data types ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(mixed_input) at test-hash_name_consistently.R:133:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:142:3'): hash_name_consistently normalizes and hashes deterministically ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names, salt = "unit-test", normalize_names = TRUE) at test-hash_name_consistently.R:142:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:152:3'): hash_name_consistently respects normalization flag ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(...) at test-hash_name_consistently.R:152:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-hash_name_consistently.R:167:3'): hash_name_consistently validates inputs and handles missing values ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::hash_name_consistently(names, salt = "unit-test", normalize_names = TRUE) at test-hash_name_consistently.R:167:3
 2. │ └─base::sapply(...)
 3. │   └─base::lapply(X = X, FUN = FUN, ...)
 4. │     └─engager (local) FUN(X[[i]], ...)
 5. └─base::loadNamespace(x)
 6.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 7.     └─base (local) withOneRestart(expr, restarts[[1L]])
 8.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:8:3'): make_clean_names_df correctly matches names ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:8:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:27:3'): make_clean_names_df handles unmatched names ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:27:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:77:3'): make_clean_names_df preserves section information ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:77:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:159:3'): make_clean_names_df handles empty lookup table ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:159:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:183:3'): make_clean_names_df handles missing columns gracefully ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:183:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:208:3'): make_clean_names_df handles student_id column issues ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:208:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-make_clean_names_df.R:224:3'): make_clean_names_df handles missing name column ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-make_clean_names_df.R:224:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-name-matching.R:7:3'): make_clean_names_df handles basic cases ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-name-matching.R:7:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-name-matching.R:36:3'): make_clean_names_df handles special characters ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-name-matching.R:36:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-name-matching.R:115:3'): make_clean_names_df handles missing values ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-name-matching.R:115:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-name-matching.R:196:3'): make_clean_names_df ensures character type inference ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
     ▆
  1. ├─engager:::make_clean_names_df(...) at test-name-matching.R:196:3
  2. │ └─engager:::apply_privacy_aware_matching(...)
  3. │   └─engager:::hash_name_consistently(transcript_names)
  4. │     └─base::sapply(...)
  5. │       └─base::lapply(X = X, FUN = FUN, ...)
  6. │         └─engager (local) FUN(X[[i]], ...)
  7. └─base::loadNamespace(x)
  8.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
  9.     └─base (local) withOneRestart(expr, restarts[[1L]])
 10.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-prompt_name_matching.R:138:3'): detect_unmatched_names works correctly ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called 'suutils'
Backtrace:
    ▆
 1. ├─engager:::detect_unmatched_names(transcript_df, roster_df) at test-prompt_name_matching.R:138:3
 2. │ └─engager:::hash_name_consistently(unmatched_names)
 3. │   └─base::sapply(...)
 4. │     └─base::lapply(X = X, FUN = FUN, ...)
 5. │       └─engager (local) FUN(X[[i]], ...)
 6. └─base::loadNamespace(x)
 7.   └─base::withRestarts(stop(cond), retry_loadNamespace = function() NULL)
 8.     └─base (local) withOneRestart(expr, restarts[[1L]])
 9.       └─base (local) doWithOneRestart(return(expr), restart)

[ FAIL 35 | WARN 61 | SKIP 15 | PASS 2066 ]
Error: Test failures
Execution halted

1 error ✖ | 1 warning ✖ | 2 notes ✖
Error: R CMD check found ERRORs
Execution halted
